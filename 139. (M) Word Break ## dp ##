
class Solution {
public:   
    bool wordBreak(string s, vector<string>& wordDict) {
        int m = s.size();
        vector<bool> dp(m + 1, false);
        dp[0] = true;
        
        for(int i = 1; i <= m; i ++) {
            //cout << " ------ " << endl;
            for(int j = 1; j <= i; j ++) {
                string tmp = s.substr(i - j, j);
                //cout << " string = " << tmp << endl;
                if(find(wordDict.begin(), wordDict.end(), tmp) != wordDict.end()){
                    // i - j : start, i : end + 1
                    //cout << " i = " << i << endl;
                    //cout << " i - j = " << i - j << endl;
                    dp[i] = (dp[i] || dp[i-j]);
                }
            }
        }
        return dp[m];
    }
};

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@@@ Time Limit Exceeded

class Solution {
public:
    bool helper(unordered_map<int, vector<int>> res, int start, int end) {
        //cout << " find start at " << start << endl;
        if(start == end) return true;
        if(res[start].size() == 0) return false;
        
        bool ans = false;
        for(int x : res[start]) {
            //cout << "   --> end at " << x << endl;
            ans = (ans || helper(res, x + 1, end));
        }
        return ans;
    }
    
    bool wordBreak(string s, vector<string>& wordDict) {
        unordered_map<int, vector<int>> res;
        
        for(auto x : wordDict) {
            size_t pos = s.find(x, 0);
            while(pos != string::npos) {
                res[pos].push_back(x.size() + pos - 1);
                pos = s.find(x, pos + 1);
            }   
        }
        return helper(res, 0, s.size());
    }
};

