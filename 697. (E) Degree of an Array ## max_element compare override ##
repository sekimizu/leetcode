class Solution {
public:
    int findShortestSubArray(vector<int>& nums) {
        int n = nums.size();
        int fre = 0, res = n;
        unordered_map<int,vector<int>> m;
        
        for(int i = 0 ; i < n ; ++i)
            m[nums[i]].push_back(i);
        for(auto e : m) 
            fre = max(fre, (int) e.second.size());
        for(auto e : m){
            if(e.second.size() == fre)
                res = min(res, e.second.back() - e.second[0] + 1);
        }
        return res;
    }
};

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

class Solution {
public:
    int findShortestSubArray(vector<int>& nums) {
        unordered_map<int, int> counter;
        unordered_map<int, pair<int, int>> index;
        
        for(int i = 0; i < nums.size(); i++) {
            if(counter[nums[i]] == 0) {
                index[nums[i]] = make_pair(i, i);
            } else {
                index[nums[i]].second = i;
            }
            counter[nums[i]]++;    
        }
        auto x = std::max_element(counter.begin(), counter.end(),
                    [](const pair<int, int>& p1, const pair<int, int>& p2) { return p1.second < p2.second; });

        int degree = x->second, min_val = INT_MAX;
        for(auto x : counter) {
            if(x.second == degree) min_val = min(min_val, index[x.first].second - index[x.first].first + 1);
        }
        return min_val;
    }
};

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

class Solution {
public:
    int findShortestSubArray(vector<int>& nums) {
        // counter save value and it's appear count, [1, 2, 2, 3, 1]
        // 1 : 2, 2 : 2, 3 : 1
        unordered_map<int, int> counter;
        // index record start and end
        // 1 : (0,4), 2 : (1,2), 3 : (3,3)
        unordered_map<int, pair<int, int>> index;
        
        for(int i = 0; i < nums.size(); i++) {
            if(counter[nums[i]] == 0) {
                index[nums[i]] = make_pair(i, i);
            } else {
                index[nums[i]].second = i;
            }
            counter[nums[i]]++;    
        }
        /*
        [1,2,2,1,2,1,1,1,1,2,2,2] failed. due to 1->6 times, 2->6times
        max_element will return 2 and got length = 11, but minimum should be 1 with size 9
        */
        #if 0
        auto x = std::max_element(counter.begin(), counter.end(),
                    [](const pair<int, int>& p1, const pair<int, int>& p2) { return p1.second < p2.second; });
        cout << " Max = " << x->first << "times : " << x->second << endl;
        return index[x->first].second - index[x->first].first + 1;
        #endif
        
        int degree = 0, min_val = INT_MAX;
        for(auto x : counter) {
            if(x.second > degree) {
                degree = x.second;
                min_val = index[x.first].second - index[x.first].first + 1;
            } else if(x.second == degree) {
                min_val = min(min_val, index[x.first].second - index[x.first].first + 1);
            }
        }
        return min_val;
    }
};