class Solution {
public:
    int strStr(string haystack, string needle) {
        int needle_index = 0;
        stack<int> sp;
        
        //[return 0 while needle is empty]
        if(needle.size() == 0) return 0;
        
        for(int i=0; i<haystack.size(); i++) {
            //cout << "(" << i << "," << needle_index << ") = (" <<  haystack.at(i) << "," << needle.at(needle_index) << ")" << endl;
            if(haystack.at(i) == needle.at(0) && needle_index != 0) {
                //[new match found, stack it cause we are comapring]
                sp.push(i);
            }
            if(haystack.at(i) == needle.at(needle_index)) {
                //[match with first char in needle, start compare]
                needle_index++;
            } else {
                //[reset needle count index]
                needle_index = 0;
                if(!sp.empty()) {
                    //[restore index from stack, sub 1 cause i++]
                    i = sp.top()-1; 
                    sp.pop();
                }
            }
            if(needle_index == needle.size()) {
                //[all match]
                return i-needle_index+1;
            } 
            
        }
        return -1;
    }
};
