class Solution {
public:
    void rotate(vector<vector<int>>& matrix) {
        int m = matrix.size();
        for(int i = 0; i <= m - 2; i++) {
            for(int j = i; j < m - 1 - i; j++) {
                swap(matrix[i][j], matrix[j][m - 1 - i]);
                swap(matrix[i][j], matrix[m - 1 - i][m - 1 - j]);
                swap(matrix[i][j], matrix[m - 1 - j][i]);
            }
            #if 0
            cout << " === Dump === i : " << i << endl;
            for(auto x : matrix) {
                for(auto y : x) {
                    cout << " " << y;
                }
                cout << endl;
            }
            #endif
        }
    }
};


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

/*

Another idea


*/

class Solution {
public:
        /*
     * clockwise rotate
     * first reverse up to down, then swap the symmetry 
     * 1 2 3     7 8 9     7 4 1
     * 4 5 6  => 4 5 6  => 8 5 2
     * 7 8 9     1 2 3     9 6 3
    */
    void rotate(vector<vector<int> > &matrix) {
        reverse1(matrix);
        for (int i = 1; i < matrix.size(); i++) {
            for (int j = 0; j < i; ++j)
                swap(matrix[i][j], matrix[j][i]);
        }
    }
    
    void reverse1(vector<vector<int>> &matrix){
        int n = matrix.size();
        for (int i=0; i<n/2;i++){
            for (int j=0; j<matrix[0].size();j++){
                swap(matrix[i][j], matrix[n-i-1][j]);
            }
        }
    }
    /*
     * anticlockwise rotate
     * first reverse left to right, then swap the symmetry
     * 1 2 3     3 2 1     3 6 9
     * 4 5 6  => 6 5 4  => 2 5 8
     * 7 8 9     9 8 7     1 4 7
    */
    void anti_rotate(vector<vector<int> > &matrix) {
        for (auto vi : matrix) reverse(vi.begin(), vi.end());
        for (int i = 0; i < matrix.size(); ++i) {
            for (int j = i + 1; j < matrix[i].size(); ++j)
                swap(matrix[i][j], matrix[j][i]);
        }
    }
};