class Solution {
public:
    
    int subHorizon(vector<vector<int>>& grid, int x, int y) {
        int sum = 0;
        //check back 
        if(x != grid.size() - 1 && grid[x + 1][y] >= 1) sum++;
        //check front
        if(x != 0 && grid[x - 1][y] >= 1) sum++;
        //check left
        if(y != 0 && grid[x][y - 1] >= 1) sum++;
        //check right
        if(y != grid[0].size() - 1 && grid[x][y + 1] >= 1) sum++;
        return sum;
    }
    
    int subVertical(vector<vector<int>>& grid) {
        int sum = 0;
        for(auto x : grid) {
            for(auto y : x) {
                if(y > 1) sum++;
            }
        }
        return sum;
    }
    
    bool checkEmptyAndSub(vector<vector<int>>& grid, bool doSub) {
        //check grid is empty or not, and also decrease 1 layer per-round
        /*
        Q:  [[1,2],[3,4]]
        L0 -> 4 blocks left [[1,2],[3,4]]
        L1 -> 3 blocks left [[0,1],[2,3]]
        L2 -> 2 blocks left [[0,0],[1,2]]
        L3 -> 1 blocks left [[0,0],[0,1]]
        L4 -> empty
        */
        bool isEmpty = true;
        for(int i = 0; i < grid.size(); i++) {
            for(int j = 0; j < grid[0].size(); j++) {
                if(doSub && grid[i][j] >= 1) {
                    grid[i][j]--;
                }
                if(isEmpty && grid[i][j] > 0) {
                    isEmpty = false;
                } 
            }
        }
        return isEmpty;
    }
    
    int surfaceArea(vector<vector<int>>& grid) {
        int ts = 0;
        bool doSub = false;
        
        while(!checkEmptyAndSub(grid, doSub)) {
            int sh = 0, sv = 0, cur_block = 0, tmp = 0;
            for(int m = 0; m < grid.size(); m++) {
                for(int n = 0; n < grid[0].size(); n++) {
                    if(grid[m][n] >= 1) {
                        cur_block++;
                        sh += subHorizon(grid, m, n);
                    }
                }
            }
            sv = subVertical(grid);
            #ifdef DEBUG
            cout << " ------------------ " << endl;
            cout << " sh = " << sh << endl;
            cout << " sv = " << sv << endl;
            cout << " cur_block = " << cur_block << endl;
            #endif
            //A block has 6 surface, sub horizon and upper layer overlap  
            tmp += (6 * cur_block - sh - sv);
            //first loop, doSub is false, which means layer 0 didn't consider to sub its bottom surface
            if(doSub) {
                //current layer's surface need to sub block numbers attach with bottom layer
                tmp -= cur_block; 
            }
            doSub = true;
            #ifdef DEBUG
            cout << " surface : " << tmp << endl;
            cout << " ------------------ " << endl;
            #endif
            ts += tmp;
        }
        return ts;
    }
};

