/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
    unordered_map<int, int> r;
    
public:
    void helper(TreeNode* root, int &L, int &R, int &sum) {
        if(!root) return;
        
        if(!root->left && !root->right && root->val >= L && root->val <= R) {
            if(r[root->val] != 1) {
                sum += root->val;   
                r[root->val] = 1;
            }
        }
        
        if(root->left != NULL) {
            if(root->val >= L && root->val <= R) {
                if(r[root->val] != 1) {
                    sum += root->val;   
                    r[root->val] = 1;
                }
                helper(root->left, L, R, sum);   
            } else {
                helper(root->left, L, R, sum);   
            }
        }
        if(root->right != NULL) {
            if(root->val >= L && root->val <= R) {
                if(r[root->val] != 1) {
                    sum += root->val;   
                    r[root->val] = 1;
                }
                helper(root->right, L, R, sum);   
            } else {
                helper(root->right, L, R, sum);   
            }
        } 
        return;
    }
    
    int rangeSumBST(TreeNode* root, int L, int R) {
        int sum = 0;
        helper(root, L, R, sum);
        return sum;
    }
};

