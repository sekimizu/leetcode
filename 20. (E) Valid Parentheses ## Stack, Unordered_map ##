class Solution {
public:
    bool isValid(string s) {
        //[stack]
        vector<char>backet;
        unordered_map<char, char>map = {
            {'(', ')'},
            {'[', ']'},
            {'{', '}'}
        };
        
        for(int index = 0; index < s.size(); index++) {
            char key = s.at(index);
            //cout << "key = " << key << endl;
            
            if(find(backet.begin(), backet.end(), key) != backet.end()) {
                //[found exist in backet, popup and compare]
                int top_key = backet.back();
                if(key == top_key) {
                    backet.pop_back();
                } else {
                    //[return false]
                    return false;
                }
            } else {
                //[first appear, append to backet at top]
                backet.push_back(map[key]);
            }
        }
        if(backet.size() != 0) {
            return false;
        }
        return true;
    }
};
