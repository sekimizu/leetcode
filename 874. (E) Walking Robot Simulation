class Solution {
public:
    //#define DEBUG
    void helper(int &x, int &y, int degree, int distance, vector<pair<int, int>> obs_arr) {
        bool x_plus = true, y_plus = true;
        if(degree == 270) y_plus = false;
        if(degree == 180) x_plus = false;
        bool block = false;
        
        #ifdef DEBUG
        cout << " distance = " << distance << endl;
        cout << " x_plus = " << x_plus << " y_plus = " << y_plus << endl;
        #endif
        if(degree == 0 || degree == 180) {
            for(auto p : obs_arr) {
                if(p.second == y) {
                    if(x_plus) {
                        if(p.first > x && p.first <= x + distance) {
                            block = true;
                            #ifdef DEBUG
                            cout << " 1BLOCK!!!" << p.first << " , " << p.second << " D = " << distance << " Degree = " << degree << endl;
                            #endif
                            x = p.first - 1;
                        }
                    } else {
                        if(p.first < x && p.first >= x - distance) {
                            block = true;
                            #ifdef DEBUG
                            cout << " 2BLOCK!!!" << p.first << " , " << p.second << " D = " << distance << " Degree = " << degree << endl;
                            #endif
                            x = p.first + 1;
                        }
                    }
                }
            }
            if(!block) x += (x_plus ? distance : (-1) * distance);
        } else if(degree == 90 || degree == 270) {
            for(auto p : obs_arr) {
                if(p.first == x) {
                    if(y_plus) {
                        if(p.second > y && p.second <= y + distance) {
                            block = true;
                            #ifdef DEBUG
                            cout << " 3BLOCK!!!" << p.first << " , " << p.second << " D = " << distance << " Degree = " << degree << endl;
                            #endif
                            y = p.second - 1;
                        }
                    } else {
                        if(p.second < y && p.second >= y - distance) {
                            block = true;
                            #ifdef DEBUG
                            cout << " 4BLOCK!!!" << p.first << " , " << p.second << " D = " << distance << " Degree = " << degree << endl;
                            #endif
                            y = p.second + 1;
                        }
                    }
                }
            }
            if(!block) y += (y_plus ? distance : (-1) * distance);
        }
    }
    
    int robotSim(vector<int>& commands, vector<vector<int>>& obstacles) {
        int max_area = 0;
        
        vector<pair<int, int>> obs_arr;
        int x_axis = 0, y_axis = 0;
        int degree = 90;
        
        for(auto x : obstacles) {
            obs_arr.push_back(make_pair(x[0], x[1]));
        }
        
        
        for(auto d : commands) {
            if(d == -1) {
                degree -= 90;
                if(degree < 0) degree += 360;
                //cout << " Degree = " << degree << endl;
            } else if(d == -2) {
                degree = (degree + 90) % 360;
                //cout << " Degree = " << degree << endl;
            } else {
                helper(x_axis, y_axis, degree, d, obs_arr);
                #ifdef DEBUG
                cout << " move to (" << x_axis << "," << y_axis << ") , D = " << d << endl;
                #endif
                int area = pow(x_axis, 2) + pow(y_axis, 2);
                max_area = max(max_area, area);
            }
        }
        return max_area;
    }
};
