########### Time Limit Exceeded

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
        int cnt = 0;
public:
    int helper(TreeNode* root) {
        if(!root) return 0;
        if(!root->left && !root->right) return 1;
        
        int left_cnt = (root->left ? helper(root->left) : 0);
        int right_cnt = (root->right ? helper(root->right) : 0);
        
        if(left_cnt + right_cnt > cnt) cnt = left_cnt + right_cnt;
        //cnt = max(left_cnt + right_cnt, cnt);
        return max(1 + helper(root->left), 1 + helper(root->right));
        
    }
    
    int diameterOfBinaryTree(TreeNode* root) {
        helper(root);
        return cnt;
    }
};

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
    int cnt = 0;
public:
    int helper(TreeNode* root) {
        if(!root) return 0;
        if(!root->left && !root->right) return 1;
        
        int left_cnt = (root->left ? helper(root->left) : 0);
        int right_cnt = (root->right ? helper(root->right) : 0);
        
        cnt = max(left_cnt + right_cnt, cnt);
        
        return max(1 + left_cnt, 1 + right_cnt);
        /*
        !!!! should not do twice recursive
        */
        //return max(1 + helper(root->left), 1 + helper(root->right));
        
    }
    
    int diameterOfBinaryTree(TreeNode* root) {
        helper(root);
        return cnt;
    }
};