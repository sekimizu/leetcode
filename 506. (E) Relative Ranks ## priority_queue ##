class Solution {
public:
    vector<string> findRelativeRanks(vector<int>& nums) {
        if(nums.size() == 0) return {};
        vector<string> res;
        unordered_map<int, string> mapping;
        vector<int> buf(nums.begin(), nums.end());
        sort(buf.begin(), buf.end());
        
        int price = 1;
        for(int i = buf.size()-1; i >= 0; i--) {
            if(price == 1) mapping[buf[i]] = "Gold Medal";
            else if(price == 2) mapping[buf[i]] = "Silver Medal";
            else if(price == 3) mapping[buf[i]] = "Bronze Medal";
            else mapping[buf[i]] = to_string(price);
            price++;
        }
        for(auto x : nums) {
            res.push_back(mapping[x]);
        }
        return res;
    }
};

@@@@@@@@@@@@@@@@@@@@@@@@@@@

class Solution {
public:
    vector<string> findRelativeRanks(vector<int>& nums) {
        if(nums.size() == 0) return {};
        // priority_queue : default order from big->small
        // pair<score, index>
        priority_queue<pair<int, int>> pq;
        vector<string> res(nums.size(), "");
        int cnt = 1;
        
        for(int i = 0; i < nums.size(); i++) {
            pq.push(make_pair(nums[i], i));
        }
        
        while(!pq.empty()) {
            if(cnt == 1) {
                res[pq.top().second] = "Gold Medal";
            } else if(cnt == 2) {
                res[pq.top().second] = "Silver Medal";
            } else if(cnt == 3) {
                res[pq.top().second] = "Bronze Medal";
            } else {
                res[pq.top().second] = to_string(cnt);
            }
            cnt++;
            pq.pop();
        }
        
        return res;
    }
};