class MinStack {
    vector<int> res;
    vector<int> min_res;
    bool isSorted = false;
public:
    /** initialize your data structure here. */
    MinStack() {
        res.clear();
        min_res.clear();
    }
    
    void push(int x) {
        res.push_back(x);
        if(isSorted) isSorted = false;
    }
    
    void pop() {
        if(res.size() != 0) {
            res.resize(res.size()-1);
            if(isSorted) isSorted = false;
        }
    }
    
    int top() {
        if(res.size() == 0) return NULL;
        return res[res.size()-1];
    }
    
    int getMin() {
        if(res.size() == 0) return NULL;
        if(!isSorted) {
            min_res = res;
            sort(min_res.begin(), min_res.end());
            isSorted = true;
        }
        return min_res[0];
    }
};

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

class MinStack {
    stack<int> s1;
    stack<int> s2;
public:
    /** initialize your data structure here. */
    MinStack() {
        
    }
    
    void push(int x) {
        s1.push(x);
        if(s2.empty() || x <= getMin()) s2.push(x);
    }
    
    void pop() {
        if(s1.top() == getMin()) s2.pop();
        s1.pop();
    }
    
    int top() {
        return s1.top();
    }
    
    int getMin() {
        return s2.top();
    }
};
