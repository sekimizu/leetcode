class Solution {
public:
    vector<string> findRepeatedDnaSequences(string s) {
        if(s.size() <= 10) {
            return {};
        }
        unordered_map<string, int> cnt;
        vector<string> res;
        
        string pattern = s.substr(0, 10);
        cnt[pattern]++;
        
        for(int i = 1; i < s.size() - 9; i++) {
            pattern = pattern.substr(1);
            pattern += s[i + 9];
            cnt[pattern]++;
            if(cnt[pattern] == 2) {
                res.push_back(pattern);
            }
        }
        return res;
    }
};

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

class Solution {
public:
    vector<string> findRepeatedDnaSequences(string s) {
        if(s.size() <= 10) {
            return {};
        }
        unordered_map<int, int> cnt;
        vector<string> res;
        string pattern = "";
        
        for(int i = 0; i < 10; i++) {
            pattern += char2bit(s[i]);
        }
        //cout << "pattern = " << pattern << endl;
        bitset<20> b(pattern);
        cnt[b.to_ulong()]++;
        
        for(int i = 1; i < s.size() - 9; i++) {
            
            pattern = pattern.substr(2);
            pattern += char2bit(s[i + 9]);
            bitset<20> b(pattern);
            cnt[b.to_ulong()]++;
            if(cnt[b.to_ulong()] == 2) {
                res.push_back(bit2char(pattern));
            }
        }
        return res;
    }
    
    string char2bit(char a) {
        if(a == 'A') {
            return "00";
        } else if(a == 'C') {
            return "01";
        } else if(a == 'G') {
            return "10";
        } else {
            return "11";
        }
    }
    
    string bit2char(string s) {
        string res = "";
        for(int i = 0; i < s.size(); i += 2) {
            if(s[i] == '0' && s[i + 1] == '0') {
                res += 'A';
            } else if(s[i] == '0' && s[i + 1] == '1') {
                res += 'C';
            } else if(s[i] == '1' && s[i + 1] == '0') {
                res += 'G';
            } else {
                res += 'T';
            }
        }
        return res;
    }
};