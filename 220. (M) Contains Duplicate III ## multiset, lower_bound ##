class Solution {
public:
    bool containsNearbyAlmostDuplicate(vector<int>& nums, int k, int t) {
        if(nums.size() == 0) return false;
        
        vector<pair<long, int>> vp;
        
        for(int i = 0; i < nums.size(); i++) {
            vp.push_back(make_pair(nums[i], i));
        }
        
        sort(vp.begin(), vp.end());
        
        for(int i = nums.size() - 1; i > 0; i--) {
            for(int j = i - 1; j >= 0; j--) {
                //cout << " i.first = " << vp[i].first << " j.first = " << vp[j].first << endl;
                if(vp[i].first - vp[j].first > t) break;
                if(abs(vp[i].second - vp[j].second) <= k) return true;
            }
        }
        return false;
    }
};

@@@@@@@@@@@@@@@@@@@@@@@@@@@

class Solution {
public:
    bool containsNearbyAlmostDuplicate(vector<int>& nums, int k, int t) {
        multiset<long> rec;
        
        for(int i = 0; i < nums.size(); i++) {
            if(i > k) rec.erase(nums[i - k - 1]);
            
            auto it = rec.lower_bound((long)nums[i] - t);
            if(it != rec.end() && abs(nums[i] - *it) <= t) {
                return true;   
            }
            rec.insert(nums[i]);
        }
        return false;
    }
};