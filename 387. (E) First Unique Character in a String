class Solution {
public:
    int firstUniqChar(string s) {
        if(s.size() == 0) return -1;
        //[unordered_map can't guarantee the map order follow the insertion order]
        unordered_map<char, int> m;
        unordered_map<char, int>::iterator it;
        
        int min_v = INT_MAX;
        char min_i = '-';
        
        for(int i = 0; i < s.size(); i++) {
            if((it = m.find(s[i])) != m.end()) {
                it->second = INT_MAX;   
            }
            else m.insert(make_pair(s[i], i));
        }
        for(auto x : m) {
            if(x.second < min_v) {
                min_i = x.first;
                min_v = x.second;
            }
        }
        return s.find(min_i);
    }
};


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


class Solution {
public:
    int firstUniqChar(string s) {
        int list[256] = { 0 };
        for(auto x : s) {
            list[x]++;
        }
        for(int i = 0; i < s.size(); i++) {
            if(list[s[i]] == 1) return i;
        }
        return -1;
    }
};


