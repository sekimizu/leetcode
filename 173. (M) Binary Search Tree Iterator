/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class BSTIterator {
    queue<int> q;
public:
    void InorderHelper(TreeNode *root) {
        if(!root) return;
        //Left
        if(root->left) InorderHelper(root->left);
        //Root
        q.push(root->val);
        //Right
        if(root->right) InorderHelper(root->right);
    }
    
    BSTIterator(TreeNode *root) {
        InorderHelper(root);
    }

    /** @return whether we have a next smallest number */
    bool hasNext() {
        return !q.empty();
    }

    /** @return the next smallest number */
    int next() {
        int res = -1;
        if(!q.empty()) {
            res = q.front();
            q.pop();
        }
        return res;
    }
};

/**
 * Your BSTIterator will be called like this:
 * BSTIterator i = BSTIterator(root);
 * while (i.hasNext()) cout << i.next();
 */

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

