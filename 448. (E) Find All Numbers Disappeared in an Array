class Solution {
public:
    vector<int> findDisappearedNumbers(vector<int>& nums) {
        vector<int> res;
        for(int i = 0; i < nums.size(); i++) {
            int j = abs(nums[i]) - 1;
            nums[j] = nums[j] > 0 ? -nums[j] : nums[j];
        }
        for(int k = 0; k < nums.size(); k++) {
            if(nums[k] > 0) res.push_back(k + 1);
        }
        return res;
    }
};

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

class Solution {
public:
    vector<int> findDisappearedNumbers(vector<int>& nums) {
        vector<int> res;
    
        int n = nums.size();
        
        for(int i = 0; i < n; i++) {
            while(nums[nums[i]-1] != nums[i]) {
                swap(nums[nums[i]-1], nums[i]);
            }
        }
        #if 0
        for(auto x : nums) {
            cout << " " << x;
        }
        cout << endl;
        #endif
        for(int j = 0; j < n; j++) {
            if(nums[j] != j + 1) {
                res.push_back(j + 1);
            }
        }
        return res;
    }
};

