/*
// Definition for a QuadTree node.
class Node {
public:
    bool val;
    bool isLeaf;
    Node* topLeft;
    Node* topRight;
    Node* bottomLeft;
    Node* bottomRight;

    Node() {}

    Node(bool _val, bool _isLeaf, Node* _topLeft, Node* _topRight, Node* _bottomLeft, Node* _bottomRight) {
        val = _val;
        isLeaf = _isLeaf;
        topLeft = _topLeft;
        topRight = _topRight;
        bottomLeft = _bottomLeft;
        bottomRight = _bottomRight;
    }
};
*/
class Solution {
public:
    Node* construct(vector<vector<int>>& grid) {
        return buildTree(grid, 0, 0, grid.size());
    }
    
    Node *buildTree(vector<vector<int>>& grid, int x, int y, int len) {
        if(len <= 0) return NULL;
        for(int i = x; i < x + len; i++) {
            for(int j = y; j < y + len; j++) {
                if(grid[i][j] != grid[x][y]) {
                    return new Node(true, false,
                            buildTree(grid, x, y, len / 2), // top-left (x same, y same)
                            buildTree(grid, x, y + len / 2, len / 2), // top-right (x same, y not same)
                            buildTree(grid, x + len / 2, y, len / 2), // bottom-left
                            buildTree(grid, x + len / 2, y + len / 2, len / 2)  // bottom-right
                    );    
                }
            }
        }
        return new Node(grid[x][y] == 1, true, NULL, NULL, NULL, NULL);
    }
};