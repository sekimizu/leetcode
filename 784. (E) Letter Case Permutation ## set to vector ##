class Solution {
public:
    void permute(string s, int begin, vector<string> &res) {
        //cout << " push " << s << endl;
        res.push_back(s);
        
        if(begin >= s.size())
            return;
        
        for(int i = begin; i < s.size(); i++) {
            if(isalpha(s[i])) {
                s[i] ^= 32;
                permute(s, i + 1, res);
                s[i] ^= 32;
            }
        }
    }
    
    vector<string> letterCasePermutation(string S) {
        vector<string> res;
        permute(S, 0, res);
        return res;
    }
};

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

class Solution {
public:
    void helper(string s, int begin, string current, set<string> &res) {
        if(current.size() == s.size()) {
            res.insert(current);
            return;
        }
        string tmp = current;
        for(int i = begin; i < s.size(); i++) {
            if((s[i] < 'a' && s[i] > 'z') || (s[i] < 'A' && s[i] > 'Z')) {
                tmp += s[i];
            } else {
                
                helper(s, i + 1, tmp + (char)tolower(s[i]), res);
                helper(s, i + 1, tmp + (char)toupper(s[i]), res);
            }
        }
        return;
    }
    
    vector<string> letterCasePermutation(string S) {
        set<string> res;
        helper(S, 0, "", res);
        vector<string> ans(res.begin(), res.end());
        return ans;
    }
};