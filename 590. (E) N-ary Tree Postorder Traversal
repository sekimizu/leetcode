/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/
class Solution {
public:
    void helper(Node *root, vector<int> &res) {
        if(!root) return;
        
        for(auto x : root->children) {
            helper(x, res);
        }
        res.push_back(root->val);
        
    }
    
    vector<int> postorder(Node* root) {
        vector<int> res;
        helper(root, res);
        return res;
    }
};

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/
class Solution {
public: 
    vector<int> postorder(Node* root) {
        if(!root) return {};
        vector<int> res;
        stack<Node*> s;
        stack<int> val;
        s.push(root);
        while(!s.empty()) {
            Node *cur = s.top(); s.pop();
            val.push(cur->val);
            if(cur->children.size() != 0) {
                for(int i = 0; i < cur->children.size(); i++) {
                    s.push(cur->children[i]);
                }    
            }
        }
        while(!val.empty()) {
            res.push_back(val.top());
            val.pop();
        }
        
        return res;
    }
};