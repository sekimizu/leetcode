/*
// Definition for a QuadTree node.
class Node {
public:
    bool val;
    bool isLeaf;
    Node* topLeft;
    Node* topRight;
    Node* bottomLeft;
    Node* bottomRight;

    Node() {}

    Node(bool _val, bool _isLeaf, Node* _topLeft, Node* _topRight, Node* _bottomLeft, Node* _bottomRight) {
        val = _val;
        isLeaf = _isLeaf;
        topLeft = _topLeft;
        topRight = _topRight;
        bottomLeft = _bottomLeft;
        bottomRight = _bottomRight;
    }
};
*/
class Solution {
public:
    Node* intersect(Node* quadTree1, Node* quadTree2) {
        if(quadTree1->isLeaf && quadTree1->val) return quadTree1;
        if(quadTree2->isLeaf && quadTree2->val) return quadTree2;
        if(quadTree1->isLeaf && !quadTree1->val) return quadTree2;
        if(quadTree2->isLeaf && !quadTree2->val) return quadTree1;     
        
        auto topleft = intersect(quadTree1->topLeft, quadTree2->topLeft);
        auto topright = intersect(quadTree1->topRight, quadTree2->topRight);
        auto botoomleft = intersect(quadTree1->bottomLeft, quadTree2->bottomLeft);
        auto bottomright = intersect(quadTree1->bottomRight, quadTree2->bottomRight);
        
        if(topleft->val == topright->val && 
           topleft->val == botoomleft->val && 
           topleft->val == bottomright->val && 
           topleft->isLeaf && topright->isLeaf && botoomleft->isLeaf && bottomright->isLeaf)
            return new Node(topleft->val, true, nullptr, nullptr, nullptr, nullptr);
        else         
            return new Node(false, false, topleft, topright, botoomleft, bottomright);
        
    }
};