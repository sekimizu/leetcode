class Solution {
public:
    int maxCount(int m, int n, vector<vector<int>>& ops) {
        int rowSize = m, colSize = n;
        
        for(auto x : ops) {
            rowSize = min(rowSize, x[0]);
            colSize = min(colSize, x[1]);
        }

        return rowSize * colSize;
    }
};

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

class Solution {
public:
    int maxCount(int m, int n, vector<vector<int>>& ops) {
        vector<int> row(n, 0);
        vector<int> col(m, 0);
        
        int max1 = 0, max2 = 0, cnt1 = 0, cnt2 = 0;
        
        for(auto x : ops) {
            for(int i = 0; i < x[1]; i++) {
                row[i]+=x[0];
            }
            for(int i = 0; i < x[0]; i++) {
                col[i]+=x[1];
            }
            //dump
            #if 0
            cout << " ----------------- " << endl;
            for(int x : row) {
                cout << " " << x;
            }
            cout << endl;
            cout << " ----------------- " << endl;
            for(int x : col) {
                cout << " " << x;
            }
            cout << endl;
            cout << " ----------------- " << endl;
            #endif
        }
        
        for(int x : row) {
            if(x > max1) {
                cnt1 = 1;
                max1 = x;
            } else if(x == max1) {
                cnt1++;
            }
        }
        //cout << " row : max = " << max1 << " count = " << cnt1 << endl; 
        for(int x : col) {
            if(x > max2) {
                cnt2 = 1;
                max2 = x;
            } else if(x == max2) {
                cnt2++;
            }
        }
        //cout << " col : max = " << max2 << " count = " << cnt2 << endl;

        return cnt1 * cnt2;
    }
};

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

########## Memory Limit Exceeded

class Solution {
public:
    int maxCount(int m, int n, vector<vector<int>>& ops) {
        if(ops.size() == 0 || ops[0].size() == 0) return m * n;
        map<pair<int, int>, int> res;
        int max_val = 0, cnt = 0;
        
        for(vector<int> x : ops) {
            //cout << " >>>> " << " i = " << x[0] << ", j = " << x[1] << endl;
            for(int i = 0; i < x[0]; i++) {
                for(int j = 0; j < x[1]; j++) {
                    res[make_pair(i, j)]++;
                }
            }
        }
        
        for(auto it : res) {
            //pair<int, int> tmp = it.first;
            //cout << tmp.first << ", " << tmp.second << " , " << it.second << endl;
            if(it.second > max_val) {
                max_val = it.second;
                cnt = 1;
            } else if(it.second == max_val) {
                cnt++;
            }
        }
        
        return cnt;
        
    }
};

