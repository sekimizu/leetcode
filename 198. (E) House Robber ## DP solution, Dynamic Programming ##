###### Time Limit Exceeded

class Solution {
    int robHouse(vector<int>& nums, int target) {
        if(target < 0 || target >= nums.size()) return 0;
        //[max : rob target, or do not rob target]
        return max(nums[target] + robHouse(nums, target+2), robHouse(nums, target+1));
    }
public:
    int rob(vector<int>& nums) {
        
        int benefit = robHouse(nums, 0);
        //cout << " Total benefit = " << benefit << endl;
        return benefit;
    }
};

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

class Solution {
public:
    int rob(vector<int>& nums) {
        int n = nums.size();
        if(n == 0) return 0;
        if(n == 1) return nums[0];
        if(n == 2) return max(nums[0], nums[1]);
        
        vector<int> dp(n);
        dp[0] = nums[0];
        dp[1] = max(dp[0], nums[1]);
        
        for(int i = 2; i < n; i++) {
            dp[i] = max(nums[i] + dp[i-2], dp[i-1]);
        }
        return dp[n-1];
        
    }
};
