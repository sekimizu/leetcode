class Solution {
public:
    void helper(int begin, vector<vector<int>> &res, vector<int>& candidates, int target, vector<int> current) {
        if(target == 0) {
            res.push_back(current);
            return;
        }
        
        for(int i = begin; i < candidates.size(); i++) {
            if(candidates[i] <= target) {
                current.push_back(candidates[i]);
                helper(i, res, candidates, target - candidates[i], current);
                current.pop_back();
            }
        }
    }
    
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<vector<int>> res;
        helper(0, res, candidates, target, {});
        return res;
    }
};

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

class Solution {
public:
    void helper(set<map<int, int>> &rec, vector<vector<int>> &res, vector<int>& candidates, int target, vector<int> current, map<int, int> m) {
        if(target < 0) return;
    
        if(target == 0) {
            if(rec.count(m) > 0) return;
            /*
            cout << " Found match ..." << endl;
            for(auto x : current) {
                cout << " " << x;
            }
            cout << endl;
            */
            rec.insert(m);
            res.push_back(current);
            return;
        }
        
        for(auto x : candidates) {
            current.push_back(x);
            m[x]++;
            helper(rec, res, candidates, target - x, current, m);
            current.pop_back();
            m[x]--;
        }
    }
    
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<vector<int>> res;
        set<map<int, int>> rec;
        
        helper(rec, res, candidates, target, {}, {});
        
        return res;
    }
};