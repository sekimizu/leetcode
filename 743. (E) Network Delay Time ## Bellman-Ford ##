class Solution {
public:
    int networkDelayTime(vector<vector<int>>& times, int N, int K) {
        vector<int> table(N+1, INT_MAX);
        table[K] = 0;
        int max_val = INT_MIN;
        bool noSwap = false;
        
        for(int i = 0; i < N && !noSwap; i++) {
            noSwap = true;
            for(vector<int> x : times) {
                int u = x[0], v = x[1], w = x[2];
                if(table[u] != INT_MAX && table[v] > table[u] + w) {
                    table[v] = table[u] + w;
                    noSwap = false;
                }
            }
        }
        
        for(int j = 1; j < N+1; j++) {
            max_val = max(max_val, table[j]);
        }
        #if 0
        for(auto x : table) {
            cout << " " << x;
        }
        cout << endl;
        #endif
        
        return max_val == INT_MAX ? -1 : max_val;
    }
};

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

class Solution {
public:
    void updateTable(vector<vector<int>> &times, vector<int> &table, queue<int> &ext, int source, int &loop, int N) {
        for(int i = 0; i < times.size(); i++) {
            vector<int> x = times[i];
            int u = x[0], v = x[1], w = x[2];
            if(u == source) {
                ext.push(v);
                int pre = table[v];
                //cout << " u = " << u << " v = " << v << endl;
                if(table[v] != -1) {
                    if(table[v] != (table[u] == -1 ? w : table[u] + w)) {
                        table[v] = min(table[v], (table[u] == -1 ? w : table[u] + w));
                    }
                } else {
                    table[v] = (table[u] == -1 ? w : table[u] + w);
                }
                if(pre != table[v]) {
                    loop = N;
                }
            }
        }
    }
    
    int networkDelayTime(vector<vector<int>>& times, int N, int K) {
        vector<int> table(N+1, -1);
        queue<int> ext;
        int max_val = INT_MIN;
        table[K] = 0;
        int loop = N;
        updateTable(times, table, ext, K, loop, N);

        while(loop > 0 && !ext.empty()) {
            int next = ext.front(); ext.pop();
            loop--;
            updateTable(times, table, ext, next, loop, N);
            #if 0
            for(auto x : table) {
                cout << " " << x;
                //max_val = max(max_val, x);
            }
            cout << endl;
            #endif
        }

        for(int i = 1; i < N + 1; i++) {
            if(table[i] == -1) return -1;
            else max_val = max(max_val, table[i]);
        }
        
        return max_val;
    }
};